openapi: "3.0.0"
info:
  title: MAKE API
  version: 1.0.0
  description: API for HMC's MAKE server
  contact:
    name: Ethan Vazquez
    email: edv121@outlook.com
servers:
  - url: https://make.hmc.edu/api/v1/
components:
  schemas:
    UserInfoObject:
      properties:
        name:
          type: string
        college_id:
          type: integer
        college_email:
          type: string
        passed_quizzes:
          type: array
          items:
            type: string
        pending_checkouts:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutLogObject'
        all_checkouts:
          type: array
          items:
            $ref: '#/components/schemas/CheckoutLogObject'
        auth_level:
          type: string

    CheckoutLogObject:
      properties:
        college_id:
          type: integer
        timestamp:
          type: integer
        item_name:
          type: string
        item_uuid:
          type: string
        checked_in:
          type: boolean
      
    PrinterObject:
      properties:
        id: 
          type: string
        status: 
          type: string
        last_updated: 
          type: integer
        current_time_left: 
          type: integer
paths:
  /inventory:
    get:
      summary: "Gets current inventory with timestamp"
      operationId: "getInventory"
      tags:
        - Inventory
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        is_material:
                          type: boolean
                        is_tool:
                          type: boolean
                        quantity:
                          type: integer
                        location_room:
                          type: string
                        location_area:
                          type: string
                        reorder_url:
                          type: string
                        specific_name:
                          type: string
                        serial_number:
                          type: string
                        brand:
                          type: string
                        model_number:
                          type: string
                        uuids:
                          type: array
                          items:
                            type: string
                  timestamp:
                    type: integer

        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: string
  /quizzes/{api_key}:
    get:
      summary: "Gets a list of all quizzes, with a list of responses for each quiz"
      operationId: "getQuizzes"
      tags:
        - Quizzes
      parameters:
        - name: api_key
          in: path
          description: "Admin API Key"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    last_updated:
                      type: integer
                    id:
                      type: string
                    name:
                      type: string
                    responses:
                      type: array
                      items:
                        type: object
                        properties:
                          timestamp:
                            type: string
                          name:
                            type: string
                          college_id:
                            type: integer
                          college_email:
                            type: string
                          passed:
                            type: boolean

        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /users/all/{api_key}:
    get:
      summary: "Gets all user information when given an API key"
      operationId: "getUsers"
      tags:
        - Users
      parameters:
        - name: api_key
          in: path
          description: "Admin API Key"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoObject"

        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /checkouts/log/{api_key}:
    get:
      summary: "Gets all checkouts"
      operationId: "getCheckoutLog"
      tags:
        - Checkout
      parameters:
        - name: api_key
          in: path
          description: "Checkout or Admin API Key"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  log:
                    type: array
                    items:
                          $ref: "#/components/schemas/CheckoutLogObject"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /users/info/{id_number}:
    get:
      summary: "Gets user information when given a college ID number"
      operationId: "getUserInfo"
      tags:
        - Users
      parameters:
        - name: id_number
          in: path
          description: "College ID Number"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfoObject"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /student_storage/user/{id_number}:
    get:
      summary: "returns the student storage object for the user"
      operationId: "getStudentStorage"
      tags:
        - studentStorage
      parameters:
        - name: id_number
          in: path
          description: "Student ID Number"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentStorageObject"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /student_storage/all/{api_key}:
    get:
      summary: "returns all student storage objects using an API key"
      operationId: "getAllStudentStorage"
      tags:
        - studentStorage
      parameters:
        - name: api_key
          in: path
          description: "API Key for all Student Storage"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllStudentStorageObjects"
        404:
          description: "Objects not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /printers/{id_number}:
    get:
      summary: "returns printers based on ID number"
      operationId: "getPrinters"
      tags:
        - Printers
      parameters:
        - name: id_number
          in: path
          description: "Student ID Number"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Printers"
        404:
          description: "Printers not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string

  /checkouts/add_entry/{id_number}/{item_name}/{api_key}:
    post:
      summary: "Checks out an item"
      operationId: "checkout"
      tags:
        - Checkout
      parameters:
        - name: id_number
          in: path
          description: "College ID Number"
          required: true
          schema:
            type: integer
        - name: item_name
          in: path
          description: "Item Name"
          required: true
          schema:
            type: string
        - name: api_key
          in: path
          description: "Checkout or Admin API Key"
          required: true
          schema:
            type: string
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
        404:
          description: "Item not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /checkouts/add_entry_uuid/{id_number}/{item_uuid}/{ api_key}:
    post:
      summary: "Checks out an item"
      operationId: "checkout"
      tags:
        - Checkout
      parameters:
        - name: id_number
          in: path
          description: "College ID Number"
          required: true
          schema:
            type: integer
        - name: item_uuid
          in: path
          description: "Item UUID"
          required: true
          schema:
            type: string
        - name: api_key
          in: path
          description: "Checkout or Admin API Key"
          required: true
          schema:
            type: string
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
        404:
          description: "Item not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /printers:
    get:
      summary: "Gets a list of all printers"
      operationId: "getPrinters"
      tags:
        - Printers
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PrinterObject"

        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: string
  /auth/set_level/{id_number}/{auth_level}/{api_key}:
    post:
      summary: "Sets the level of authentication by ID, using an API Key"
      operationId: "setAuthLevel"
      tags:
        - Auth
      parameters:
        - name: id_number
          in: path
          description: "College ID Number"
          required: true
          schema:
            type: integer
        - name: auth_level
          in: path
          description: "Authentication Level"
          required: true
          schema:
            type: string
        - name: api_key
          in: path
          description: "Checkout or Admin API Key"
          required: true
          schema:
            type: string
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
        404:
          description: "Item not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /auth/set_quiz/{id_number}/{quiz_name}/{passed}/{api_key}:
    post:
      summary: "Posts whether a user passed a given quiz based on ID, using an API Key"
      operationId: "setAuthQuiz"
      tags:
        - Auth
      parameters:
        - name: id_number
          in: path
          description: "College ID Number"
          required: true
          schema:
            type: integer
        - name: quiz_name
          in: path
          description: "Name of Quiz Taken"
          required: true
          schema:
            type: string
        - name: passed
          in: path
          description: "Pass/Failed a Quiz"
          required: true
          schema:
            type: boolean
        - name: api_key
          in: path
          description: "Checkout or Admin API Key"
          required: true
          schema:
            type: string
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
        404:
          description: "Item not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /printers/update_status:
    post:
      summary: "Sets status of the printer"
      operationId: "updatePrinterStatus"
      tags:
        - Printers
      responses:
        201:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
        404:
          description: "Printer not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /printers/join_queue/{id_number}:
    post:
      summary: "joins printer queue based on ID number"
      operationId: "joinPrinterQueue"
      tags:
        - Printers
      parameters:
        - name: id_number
          in: path
          description: "Student ID Number"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Printers"
        404:
          description: "Printer Queue not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /printers/leave_queue/{id_number}:
    post:
      summary: "leave printer queue based on ID number"
      operationId: "leavePrinterQueue"
      tags:
        - Printers
      parameters:
        - name: id_number
          in: path
          description: "Student ID Number"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Printers"
        404:
          description: "Printer Queue not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
  /student_storage/add_entry/{id_number}/{slot_id}/{api_key}:
    post:
      summary: "adds a student storage object entry"
      operationId: "addStudentStorageEntry"
      tags:
        - studentStorage
      parameters:
        - name: id_number
          in: path
          description: "Student ID Number"
          required: true
          schema:
            type: integer
        - name: slot_id
          in: path
          description: "Slot ID"
          required: true
          schema:
            type: integer
        - name: api_key
          in: path
          description: "API Key"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentStorageObject"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: string
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: string
